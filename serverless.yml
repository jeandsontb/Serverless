service: certificate

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  region: sa-east-1
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
      Resource: '*'
    - Effect: Allow
      Action: 
        - s3:*
      Resource: '*'
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    external:
      - chrome-aws-lambda
  dynamodb:
    stages:
      - dev
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  generateCertificate:
    handler: src/functions/generateCertificate.handle
    events:
      - http:
          path: /generateCertificate
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:${self.provider.region}:*:table/users_certificates'
  verifyCertificate:
    handler: src/functions/verifyCertificate.handle
    events:
      - http:
          path: /verifyCertificate/{id}
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self.provider.region}:*:table/users_certificates'

package: 
  individually: false
  include: './src/templates/**'

resources:
  Resources:
    dbCertificateUsers:
      Type: 'AWS::DynamoDB::Table'      
      Properties:
        TableName: users_certificates
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH